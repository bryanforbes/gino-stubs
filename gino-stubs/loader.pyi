from typing import Any, Generic, Iterable, Iterator, List, TypeVar

from sqlalchemy import Column
from sqlalchemy.sql.selectable import Select as _SASelect

from .api import GinoExecutor
from .declarative import Model

_T = TypeVar('_T')

class _GinoSelect(_SASelect, Generic[_T]):
    gino: GinoExecutor[_T]

class Loader:
    @classmethod
    def get(cls, value: Any) -> Any: ...
    @property
    def query(self) -> _GinoSelect[Any]: ...
    def do_load(self, row: Any, context: Any) -> None: ...
    def get_columns(self) -> Iterable[Any]: ...
    def get_from(self) -> Any: ...
    def __getattr__(self, item: Any) -> Any: ...

class ModelLoader(Loader, Generic[_T]):
    _ML = TypeVar('_ML', bound='ModelLoader[Any]')
    model: _T = ...
    columns: Any = ...
    extras: Any = ...
    on_clause: Any = ...
    def __init__(self, model: _T, *column_names: Any, **extras: Any) -> None: ...
    @property
    def query(self) -> _GinoSelect[_T]: ...
    def do_load(self, row: Any, context: Any) -> Any: ...
    def get_columns(self) -> Iterator[Column[Any]]: ...
    def get_from(self) -> Any: ...
    def load(self: '_ML', *column_names: Any, **extras: Any) -> '_ML': ...
    def on(self: '_ML', on_clause: Any) -> '_ML': ...
    def distinct(self: '_ML', *columns: Any) -> '_ML': ...
    def none_as_none(self: '_ML', enabled: bool = ...) -> '_ML': ...

class AliasLoader(ModelLoader[_T]):
    def __init__(self, alias: _T, *column_names: Any, **extras: Any) -> None: ...

class ColumnLoader(Loader):
    column: Any = ...
    def __init__(self, column: Any) -> None: ...
    def do_load(self, row: Any, context: Any) -> Any: ...

class TupleLoader(Loader):
    loaders: Any = ...
    def __init__(self, values: Any) -> None: ...
    def do_load(self, row: Any, context: Any) -> Any: ...

class CallableLoader(Loader):
    func: Any = ...
    def __init__(self, func: Any) -> None: ...
    def do_load(self, row: Any, context: Any) -> Any: ...

class ValueLoader(Loader):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
    def do_load(self, row: Any, context: Any) -> Any: ...
